#include <stdio.h> //question2
#include <stdbool.h>

#define SIZE 9

bool is_valid(char board[SIZE][SIZE], int row, int col, char num) {
    // Check if 'num' is not present in the current row and column
    for (int i = 0; i < SIZE; i++) {
        if (board[row][i] == num || board[i][col] == num) {
            return false;
        }
    }

    
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

bool find_empty_location(char board[SIZE][SIZE], int *row, int *col) {
    for (*row = 0; *row < SIZE; (*row)++) {
        for (*col = 0; *col < SIZE; (*col)++) {
            if (board[*row][*col] == '.') {
                return true;
            }
        }
    }
    return false;
}

bool solve_sudoku(char board[SIZE][SIZE]) {
    int row, col;

    
    if (!find_empty_location(board, &row, &col)) {
        return true;
    }

    
    for (char num = '1'; num <= '9'; num++) {
        if (is_valid(board, row, col, num)) {
            
            board[row][col] = num;

            
            if (solve_sudoku(board)) {
                return true;
            }

            
            board[row][col] = '.';
        }
    }

    
    return false;
}

void print_board(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    char board[SIZE][SIZE] = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    if (solve_sudoku(board)) {
        printf("Sudoku solution:\n");
        print_board(board);
    } else {
        printf("No solution \n");
    }

    return 0;
}
